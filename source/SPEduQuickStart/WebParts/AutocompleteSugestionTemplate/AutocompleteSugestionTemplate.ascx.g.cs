//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4984
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SPEduQuickStart.WebParts.AutocompleteSugestionTemplate {
    using System.Web;
    using System.Text.RegularExpressions;
    using Microsoft.SharePoint.WebPartPages;
    using Microsoft.SharePoint.WebControls;
    using System.Web.Security;
    using Microsoft.SharePoint.Utilities;
    using System.Web.UI;
    using System;
    using System.Web.UI.WebControls;
    using System.Collections.Specialized;
    using Microsoft.SharePoint;
    using System.Collections;
    using System.Web.Profile;
    using System.Text;
    using System.Web.Caching;
    using System.Configuration;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.SessionState;
    using System.Web.UI.HtmlControls;
    
    
    public partial class AutocompleteSugestionTemplate {
        
        public static implicit operator global::System.Web.UI.TemplateControl(AutocompleteSugestionTemplate target) 
        {
            return target == null ? null : target.TemplateControl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        private void @__BuildControlTree(global::SPEduQuickStart.WebParts.AutocompleteSugestionTemplate.AutocompleteSugestionTemplate @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n<script type=\"text/javascript\">\r\n    var clientContext = null;\r\n    var web = n" +
                        "ull;\r\n    var fields = null;\r\n    function GetWebTemplates() {\r\n         var con" +
                        "text = new SP.ClientContext.get_current();\r\n         var website = clientContext" +
                        ".get_web();\r\n         var languageId = web.get_language();\r\n         this.templa" +
                        "teCollection = web.getAvailableWebTemplates(languageId, false);\r\n         client" +
                        "Context.load(templateCollection);\r\n         clientContext.executeQueryAsync(Func" +
                        "tion.createDelegate(this, this.success), Function.createDelegate(this, this.fail" +
                        "ed));\r\n    }\r\n\r\n    function success() {\r\n        var Templates = \"\";\r\n        v" +
                        "ar siteTemplatesEnum = templateCollection.getEnumerator();\r\n        this.availab" +
                        "leTags = [];\r\n        while (siteTemplatesEnum.moveNext()) {\r\n            var si" +
                        "teTemplate = siteTemplatesEnum.get_current();\r\n            availableTags.push(si" +
                        "teTemplate.get_title())\r\n            //Templates +=  siteTemplate.get_title()+ \"" +
                        "-\" + siteTemplate.get_name()  +\'\\n\';\r\n        }\r\n    }\r\n\r\n    function failed(se" +
                        "nder, args) {\r\n        alert(\"Failed when obtain internal Websites Templates.\");" +
                        "\r\n    }\r\n\r\n    function Initialize() {\r\n        clientContext = new SP.ClientCon" +
                        "text.get_current();\r\n        web = clientContext.get_web();\r\n\r\n        clientCon" +
                        "text.load(web);\r\n        clientContext.executeQueryAsync(Function.createDelegate" +
                        "(this, this.onSuccess),\r\n            Function.createDelegate(this, this.onFail))" +
                        ";\r\n    }\r\n    function onSuccess(sender, args) {\r\n        GetWebTemplates();\r\n  " +
                        "  }\r\n    function onFail(sender, args) {\r\n        showErroNotification(\'Failed t" +
                        "o get list. Error:\' + args.get_message() + \'\\n\' + args.get_stackTrace() + \'\');\r\n" +
                        "    }\r\n\r\n\r\n    ExecuteOrDelayUntilScriptLoaded(Initialize, \"sp.js\");\r\n\r\n\r\n    fu" +
                        "nction LoadAutoComplete() {\r\n        $(document).ready(function () {\r\n          " +
                        "  this.fields = init_fields_v3();\r\n            var id = $(this.fields[\'Template\'" +
                        "].getElementsByTagName(\'input\')).attr(\'id\');\r\n\r\n                $(\'#\' + id).auto" +
                        "complete({\r\n                    source: availableTags\r\n                });\r\n    " +
                        "    });\r\n    }\r\n\r\n    function init_fields_v3() {\r\n        var toFind, res, myMa" +
                        "tch, disp, fin, type\r\n        res = {};\r\n        toFind = \"td.ms-formbody\";\r\n   " +
                        "     if ($(\"td.ms-formbodysurvey\").length > 0) {\r\n            toFind = \"td.ms-fo" +
                        "rmbodysurvey\";\r\n        }\r\n        $(toFind).each(function () {\r\n            myM" +
                        "atch = $(this).html().match(/FieldName=\"(.+)\"\\s+FieldInternalName=\"(.+)\"\\s+Field" +
                        "Type=\"(.+)\"\\s+/);\r\n            if (myMatch != null) {\r\n                disp = my" +
                        "Match[1];\r\n                fin = myMatch[2];\r\n                type = myMatch[3];" +
                        "\r\n                if (type == \'SPFieldNote\') {\r\n                    if ($(this)." +
                        "find(\'script\').length > 0) {\r\n                        type = type + \"_HTML\";\r\n  " +
                        "                  } else if ($(this).find(\"div[id$=\'_TextField_inplacerte\']\").le" +
                        "ngth > 0) {\r\n                        type = type + \"_EHTML\";\r\n                  " +
                        "  }\r\n                }\r\n                if (type == \'SPFieldLookup\') {\r\n        " +
                        "            if ($(this).find(\'input\').length > 0) {\r\n                        typ" +
                        "e = type + \"_Input\";\r\n                    }\r\n                }\r\n                " +
                        "res[fin] = this.parentNode;\r\n                $(res[fin]).attr(\'FieldDispName\', d" +
                        "isp);\r\n                $(res[fin]).attr(\'FieldType\', type);\r\n            }\r\n    " +
                        "    });\r\n        return res;\r\n    }\r\n</script>\r\n\r\n"));
        }
        
        private void InitializeControl() {
            this.@__BuildControlTree(this);
            this.Load += new global::System.EventHandler(this.Page_Load);
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        protected virtual object Eval(string expression) {
            return global::System.Web.UI.DataBinder.Eval(this.Page.GetDataItem(), expression);
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        protected virtual string Eval(string expression, string format) {
            return global::System.Web.UI.DataBinder.Eval(this.Page.GetDataItem(), expression, format);
        }
    }
}
