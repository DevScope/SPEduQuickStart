//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4984
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SPEduQuickStart.WebParts.AutocompleteSugestionTemplate {
    using System.Web;
    using System.Text.RegularExpressions;
    using Microsoft.SharePoint.WebPartPages;
    using Microsoft.SharePoint.WebControls;
    using System.Web.Security;
    using Microsoft.SharePoint.Utilities;
    using System.Web.UI;
    using System;
    using System.Web.UI.WebControls;
    using System.Collections.Specialized;
    using Microsoft.SharePoint;
    using System.Collections;
    using System.Web.Profile;
    using System.Text;
    using System.Web.Caching;
    using System.Configuration;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.SessionState;
    using System.Web.UI.HtmlControls;
    
    
    public partial class AutocompleteSugestionTemplate {
        
        public static implicit operator global::System.Web.UI.TemplateControl(AutocompleteSugestionTemplate target) 
        {
            return target == null ? null : target.TemplateControl;
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        private void @__BuildControlTree(global::SPEduQuickStart.WebParts.AutocompleteSugestionTemplate.AutocompleteSugestionTemplate @__ctrl) {
            System.Web.UI.IParserAccessor @__parser = ((System.Web.UI.IParserAccessor)(@__ctrl));
            @__parser.AddParsedSubObject(new System.Web.UI.LiteralControl("\r\n<script type=\"text/javascript\">\r\n    var clientContext = null;\r\n    var web = n" +
                        "ull;\r\n  \r\n    function GetWebTemplates() {\r\n\r\n        var context = new SP.Clien" +
                        "tContext.get_current();\r\n\r\n        var website = context.get_web();\r\n        var" +
                        " languageId = website.get_language();\r\n        //alert(languageId);\r\n        thi" +
                        "s.templateCollection = web.getAvailableWebTemplates(languageId, false);\r\n       " +
                        " this.templateCollection = website.getAvailableWebTemplates(2070, false);\r\n\r\n   " +
                        "     context.load(templateCollection);\r\n\r\n        context.executeQueryAsync(Func" +
                        "tion.createDelegate(this, this.success), Function.createDelegate(this, this.fail" +
                        "ed));\r\n    }\r\n\r\n    function success() {\r\n\r\n        var Templates = \"\";\r\n\r\n     " +
                        "   var siteTemplatesEnum = templateCollection.getEnumerator();\r\n\r\n        this.a" +
                        "vailableTags = [];\r\n\r\n        while (siteTemplatesEnum.moveNext()) {\r\n\r\n        " +
                        "    var siteTemplate = siteTemplatesEnum.get_current();\r\n            availableTa" +
                        "gs.push(siteTemplate.get_title())\r\n            //Templates +=  + \"-\" + siteTempl" +
                        "ate.get_name()  +\'\\n\';\r\n\r\n        }\r\n\r\n        //alert(\"Site Templates - \" + \'\\n" +
                        "\' + Templates);\r\n\r\n    }\r\n\r\n    function failed(sender, args) {\r\n        alert(\"" +
                        "Failed\");\r\n    }\r\n\r\n\r\n\r\n    function Initialize() {\r\n        clientContext = new" +
                        " SP.ClientContext.get_current();\r\n        web = clientContext.get_web();\r\n\r\n    " +
                        "    clientContext.load(web);\r\n        clientContext.executeQueryAsync(Function.c" +
                        "reateDelegate(this, this.onSuccess),\r\n            Function.createDelegate(this, " +
                        "this.onFail));\r\n    }\r\n    function onSuccess(sender, args) {\r\n        GetWebTem" +
                        "plates();\r\n    }\r\n    function onFail(sender, args) {\r\n        showErroNotificat" +
                        "ion(\'Failed to get list. Error:\' + args.get_message() + \'\\n\' + args.get_stackTra" +
                        "ce() + \'\');\r\n    }\r\n\r\n\r\n    ExecuteOrDelayUntilScriptLoaded(Initialize, \"sp.js\")" +
                        ";\r\n    function LoadAutoComplete() {\r\n        $(document).ready(function () {\r\n " +
                        "           $(\'#ctl00_m_g_053f256c_889e_4cf4_b980_838ed1fcc5a6_ctl00_ctl05_ctl03_" +
                        "ctl00_ctl00_ctl04_ctl00_ctl00_TextField\').autocomplete({\r\n                source" +
                        ": availableTags\r\n            });\r\n        });\r\n    }\r\n</script>"));
        }
        
        private void InitializeControl() {
            this.@__BuildControlTree(this);
            this.Load += new global::System.EventHandler(this.Page_Load);
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        protected virtual object Eval(string expression) {
            return global::System.Web.UI.DataBinder.Eval(this.Page.GetDataItem(), expression);
        }
        
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
        protected virtual string Eval(string expression, string format) {
            return global::System.Web.UI.DataBinder.Eval(this.Page.GetDataItem(), expression, format);
        }
    }
}
